{
  "name": "socketio-jwt",
  "version": "2.0.1",
  "description": "authenticate socket.io connections using JWTs",
  "main": "lib/index.js",
  "keywords": [
    "socket",
    "socket.io",
    "jwt"
  ],
  "author": {
    "name": "Jos√© F. Romaniello",
    "email": "jfromaniello@gmail.com",
    "url": "http://joseoncode.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/auth0/socketio-jwt.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "license": "MIT",
  "dependencies": {
    "jsonwebtoken": "~0.1.0",
    "xtend": "~2.0.3"
  },
  "devDependencies": {
    "request": "~2.19.0",
    "should": "~1.2.2",
    "mocha": "~1.17.0",
    "express": "~3.1.2",
    "socket.io": "~0.9.14",
    "passport-local": "~0.1.6",
    "xmlhttprequest": "~1.5.0",
    "socket.io-client": "git+https://github.com/jfromaniello/socket.io-client.git",
    "connect": "~2.7.11"
  },
  "readme": "Authenticate socket.io incoming connections with JWTs. This is useful if you are build a single page application and you are not using cookies as explained in this blog post: [Cookies vs Tokens. Getting auth right with Angular.JS](http://blog.auth0.com/2014/01/07/angularjs-authentication-with-cookies-vs-token/).\n\n## Installation\n\n```\nnpm install socketio-jwt\n```\n\n## Example usage\n\n```javascript\n// set authorization for socket.io\nio.sockets\n  .on('connection', socketioJwt.authorize({\n    secret: 'your secret or public key',\n    timeout: 15000 // 15 seconds to send the authentication message\n  }).on('authenticated', function(socket) {\n    //this socket is authenticated, we are good to handle more events from it.\n    console.log('hello! ' + socket.decoded_token.name);\n  }));\n```\n\n__Client side__:\n\n```javascript\nvar socket = io.connect('http://localhost:9000');\nsocket.on('connect', function (socket) {\n  socket\n    .on('authenticated', function () {\n      //do other things\n    })\n    .emit('authenticate', {token: jwt}); //send the jwt\n});\n```\n\n## One roundtrip\n\nThe previous approach uses a second roundtrip to send the jwt, there is a way you can authenticate on the handshake by sending the JWT as a query string, the caveat is that intermediary HTTP servers can log the url.\n\n```javascript\nvar io            = require(\"socket.io\")(server);\nvar socketioJwt   = require(\"socketio-jwt\");\n\n// set authorization for socket.io\nio.set('authorization', socketioJwt.authorize({\n  secret: 'your secret or public key',\n  handshake: true\n}));\n\nio.on('connection', function (socket) {\n  console.log('hello! ', socket.handshake.decoded_token.name);\n})\n```\n\nFor more validation options see [auth0/jsonwebtoken](https://github.com/auth0/node-jsonwebtoken).\n\n__Client side__:\n\nAppend the jwt token using query string:\n\n```javascript\nvar socket = io.connect('http://localhost:9000', {\n  'query': 'token=' + your_jwt\n});\n```\n\n## Contribute\n\nYou are always welcome to open an issue or provide a pull-request!\n\nAlso check out the unit tests:\n```bash\nnpm test\n```\n\n## License\n\nLicensed under the MIT-License.\n2013 AUTH10 LLC.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/auth0/socketio-jwt/issues"
  },
  "homepage": "https://github.com/auth0/socketio-jwt",
  "_id": "socketio-jwt@2.0.1",
  "_from": "socketio-jwt@~2.0.1"
}
