{
  "name": "etcd-registry",
  "version": "0.6.1",
  "description": "Service registry for Node.js on top of etcd",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/etcd-registry.git"
  },
  "scripts": {
    "test": "tap test.js"
  },
  "dependencies": {
    "request": "~2.33.0",
    "network-address": "0.0.4",
    "roundround": "~0.2.0"
  },
  "devDependencies": {
    "tap": "~0.4.8"
  },
  "readme": "# etcd-registry\n\nService registry for Node.js on top of [etcd](https://github.com/coreos/etcd)\n\n\tnpm install etcd-registry\n\n## Usage\n\n``` js\nvar registry = require('etcd-registry');\n\n// Pass the nodes in your cluster in a connection string\nvar services = registry('127.0.0.1:4001,127.0.0.1:4002,127.0.0.1:4003');\n\n// Join the registry\nservices.join('my-service-name', {port:8080});\n\n// Wait a bit and do a lookup\nservices.lookup('my-service-name', function(err, service) {\n\tconsole.log('Found the following service:');\n\tconsole.log(service);\n});\n\n```\n\nRunning the above [example](https://github.com/mafintosh/etcd-registry/blob/master/example.js) will produce the following output\n\n```\nFound the following service:\n{\n\tname: 'my-service-name',\n\tport: 8080,\n\thostname: '192.168.1.10',\n\thost: '192.168.1.10:8080',\n\turl: 'http://192.168.1.10:8080'\n}\n```\n\n## Full api\n\n* `services = registry(connection-string)` Create a new registry client\n* `services.join(name, service, [cb])` Join the registry with a new service\n* `services.leave([name], [cb])` Leave the registry. Omit the name to remove local services\n* `services.lookup(name, cb)` Lookup a single service\n* `services.list([name], cb)` List all services as an array. Omit the name to list all services\n\n## Connection string\n\nThe connection has the following format\n\n\tprotocol://host1,host2,host3,.../namespace\n\nThe protocol can be `https` or `http` and defaults to `http`.\nIf you set a `namespace` all keys will be prefixed with the value.\nIf you do not specify a port in the hosts `4001` will be used (default etcd port).\n\n## Services\n\nServices are just JSON documents. `etcd-registry` will add a default `hostname` and a couple of other properties.\nAn example of a service document could be:\n\n``` js\n{\n\tname: 'my-service',\n\tport: 8080,\n\thostname: '192.168.1.10',       // added by etcd-registry\n\thost: '192.168.1.10:8080',      // added by etcd-registry\n\turl: 'http://192.168.1.10:8080' // added by etcd-registry\n}\n```\n\nThese documents are saved in [etcd](https://github.com/coreos/etcd) with a TTL of 10s.\nEvery 5s `etcd-registry` will send a heartbeat for each service to the registry which resets the expiration counter.\nIf possible you should call `services.leave()` before exiting your service process. Otherwise your service will be garbage collected after (at most) 10s\n\n## Service hierarchies\n\nUse `/` in your service name to build service hierachies.\nFor example if you add a service under `public/my-service` you will be able to list all `public` services by doing\n\n``` js\nservices.list('public', function(err, list) {\n\t// list is an array of all services called public or starting with public/\n});\n```\n\n## Fault tolerance\n\nIf a operation fails `etcd-registry` will try another node in the cluster until it has tried everyone.\nEvery 60s `etcd-registry` will ping your cluster to see if new machines has joined and update the connection string\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/etcd-registry/issues"
  },
  "homepage": "https://github.com/mafintosh/etcd-registry",
  "_id": "etcd-registry@0.6.1",
  "_from": "etcd-registry@^0.6.1"
}
