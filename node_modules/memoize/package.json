{
  "name": "memoize",
  "description": "memoize caches your callbacks given a set of arguments w/ persistence",
  "keywords": [
    "memoize",
    "cache"
  ],
  "version": "0.1.1",
  "author": {
    "name": "George Stagas",
    "email": "gstagas@gmail.com"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "tosource": ">=0.1.1"
  },
  "main": "./memoize",
  "repository": {
    "type": "git",
    "url": "https://github.com/stagas/memoize"
  },
  "bugs": {
    "url": "https://github.com/stagas/memoize/issues"
  },
  "readme": "memoize\n=======\nmemoize caches your callbacks given a set of arguments\n\nInstallation\n------------\n    npm install memoize\n\nUsage\n-----\n```javascript\nmemoize(<object or function to memoize>, [expire time in ms], [array of methods to memoize], [options object])\n```\n\nArguments after the 1st one can be passed in any order.\n\nAvailable options (defaults shown):\n\n```javascript\n{\n  expire  : 30000,  // Expire time in ms (false to never expire)\n  exclude : [],     // Array of methods to exclude from memoizing\n  only    : [],     // Array of methods to memoize only\n  error   : true,   // If false, ignore errors and memoize anyway. Useful if your function doesn't callback an error\n  debug   : false,  // Debugging\n  store   : new MemoryStore()   // Storage engine to use - required methods: get, set, clear\n}\n```\n\nYou can set global options using `memoize.set(key, value)` or `memoize.set(options object)`.\nIf you wish to retrieve a value use `memoize.get(key)`\n\nTo force expiration of all stored memoized values: `memoize.clear(memoized object)`\n\nExamples\n--------\n\n```javascript\nvar memoize = require('memoize')\n\nvar date = memoize(function(seed, cb) {\n  setTimeout(function() {\n    cb(null, Date.now())\n  }, 100)\n})\n\ndate(1, function(err, d1) { // given a set of arguments\n  console.log(d1) // 1304606051552\n  date(1, function(err, d2) { // same arguments\n    console.log(d2) // 1304606051552  cached! same results\n    date(2, function(err, d3) { // we changed the arguments\n      console.log(d3) // 1304606051652  so it's different\n    })\n  })\n})\n```\n\nalso entire objects:\n\n```javascript\nvar memoize = require('memoize')\n  , redis = memoize('myobject', require('redis').createClient(), { exclude: [ 'set' ] })\n\nredis.set('foo', 'bar', function(err) {\n  redis.get('foo', function(err, res) {\n    console.log(res) // 'bar'\n    redis.set('foo', 'zoo', function(err) {\n      redis.get('foo', function(err, res) {\n        console.log(res) // still 'bar', hasn't expired yet!\n      })\n    })\n  })\n})\n```\n\nTodo\n----\nBetter tests",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/stagas/memoize",
  "_id": "memoize@0.1.1",
  "dist": {
    "shasum": "0ca22fd35340aa228baf1a6e0dc88a54b3535771"
  },
  "_from": "memoize@",
  "_resolved": "https://registry.npmjs.org/memoize/-/memoize-0.1.1.tgz"
}
